#!/usr/bin/perl
package ExpSettings;
##############################################################################
#  This is an experimental settings file
#    The variables in this file are made to be global perl variables and
#    are used by the scripts that create and run batch jobs.  All of the
#    variables must be declared, and some of them with special empty values
#    or the scripts will break.  
#  
#  To use, you copy this file into the directory you want to run batches
#  from (renaming to something that makes sense, probably removing the
#  .example, for example).  You then invoke the script of your choice like so
#  scripts/sometool/<dosomething>.pl <expSettings>.pl
#  where <dosomething>.pl is the name of the script you are trying to run
#  and <expSettings>.pl is the copy of this file you have edited to run
#  your batch experiment.  By default, many of the scripts assume you 
#  are one level down from the top-level experiment directory, i.e. you
#  are in a directory where ../scripts is the script directory.
#
#  The main purpose of these scripts is to do many jobs in some type of 
#  sweep.  Each part of the applications, architectures, and SPR settings
#  can all be swept, and a binary search of minimum channel width for 
#  mapping an app to an architecture can be done.  
#  The two main options for sweep types are
#  "crossProduct" - This will take all of the values for all of the 
#    parameters in the appropriate xxxxSweeps hash, and run jobs across
#    the cross product of the parameters in a given xxxxSweeps hash.
#  "indexed" - This assumes all entries in the xxxxSweeps hash of a 
#    given type has the same number of values.  A job will be run using
#    all of the values at index 1, all of the values at index 2, etc.
#
#  Additionally, you can also set up the scripts to do a binary search
#  for the minimum successfully mappable channel width.  These settings
#  are in their own section below.
#
#  Apart from the binary channel width search, the scripts do not do 
#  any sort of range generation, so if you want to run settings 
#  1 to 4 for a given parameter, you have to list out
#  "1","2","3","4"

##############################################################################
#  Settings for experiment directories
##############################################################################
#  These settings indicate which directories each of the
#  Condor submit jobs and tool outputs should be in.

our $archDir      = "RunTkArch";
our $macahDir     = "RunTkMacah";
our $FSimDir      = "RunTkFSim";
our $preSimDir    = "RunTkPreSim";
our $sprDir       = "RunTkSpr";
our $analyzeDir   = "RunTkLyze";
our $placementDir = "RunTkPlacement";

##############################################################################
#  Settings for applications
##############################################################################

my $exp = `experiment_dir`;
chomp($exp);
do "${exp}/scripts/appset_default.pl";

our @appList = (
<APPLICATION NAMES>
);

our %appSettings = ( 
<APPLICATION SETTINGS>
);

our %appSweeps = ( 
<APPLICATION SWEEPS>
);

our $appSweepType = $AppSettings::appSweepType;

#our %appBinarySearchWidthUpperLimit = %AppSettings::appBinarySearchWidthUpperLimit;

#our %appBinarySearchWidthLowerLimit = %AppSettings::appBinarySearchWidthLowerLimit;

our %jobMaxMem = %AppSettings::appJobMaxMem;

##############################################################################
#  Settings for SPR
##############################################################################

#These settings will be used on all SPR runs
#These settings can be generated by using a GUI:
#java -cp <path to SPR.jar> configurator.PropertiesGenerator.java
#They are all initialized to SPR defaults, so you will have to change
# anything you don't want to be default.
#  Be careful, the scripts put in entries for 
# dfgFileName, dfgModuleName, dpgFileName, dpgModuleName, outputFileName,
# outputStatsFileName, and distEstimateTableFile that can be overridden
# by including them here.  That will probably mess up your run, so 
# make sure they aren't put in here accidentally.
our %SPRSettings = (

  # These are probably pretty good settings to use, and they
  # differ from the defaults of SPR, so these settings need to be here.
  "SPRProperties.includePaths" => "../../../../toolchain/Macah/SimulationModels/",
  "SPRProperties.visualize"    => "false",
  "SPRProperties.dfgStyle"        => "External",
  "SPRProperties.configWriter" => "configWriter.ExternalConfigWriter",
  "SPRProperties.SPRIterations"   => "40",
  "SPRProperties.debugDevices"    => "primitives__streamin:primitives__streamout",
  # timeLimit in seconds (-1 means unlimited)
  # 43,200 seconds = 12 hours
  "SPRProperties.timeLimit" => "43200",
  "SimAnnealPlacerProperties.movesPerIteration" => "10",
  "SimAnnealPlacerProperties.randomSeed"              => "1234123",
  "SimAnnealPlacerProperties.moveType"                => "clusterSwapMove",
  "SimAnnealPlacerProperties.useConservativePadding"  => "true",
  "SimAnnealPlacerProperties.coolingSchedule"         => "adaptive",
  "RouterProperties.distEstMethod"             => "router.ExternalDistanceFunctionPlugin",
  "RouterProperties.historyInitClass" => "router.CydraHistoryInitializer",
  "RouterProperties.maxIterations"             => "100",
  "RouterProperties.noProgressLimit"           => "20",
  "RouterProperties.distanceLatencyFailSmooth" => "true",
  "RouterProperties.continueOnCongestion"    => "true",
  "RouterProperties.maxVisitsPerLatency"     => "1",
  "RouterProperties.placerPickNthBestDistanceEstimate" => "2",
  "RouterProperties.routerShareFactor" => "0.25",
  # "RouterProperties.routerShareFactor" => "1.0",
  "RouterProperties.multiplicativePresentCost" => "true",


  # These are a bunch of other SPR settings whose defaults are probably
  # good to begin with, so we don't need to explicitly set them
#  "SPRProperties.doSchedule"                           => "true",
#  "SPRProperties.doPlace"                              => "true",
#  "SPRProperties.doRoute"                              => "true",
#  "SPRProperties.fixPrePlacement"                      => "true",
#  "SPRProperties.minII"                                => "1",
  "SPRProperties.maxII"                                => "16",
  "SPRProperties.visMethod"                            => "Electric;SVGGI",
#  "SchedulerProperties.budgetRatio"                    => "2.0",
#  "SchedulerProperties.scheduler"                      => "IterativeModulo",
#  "SimAnnealPlacerProperties.iterations"               => "100",
#  "SimAnnealPlacerProperties.movesPerIteration"        => "5",
#  "SimAnnealPlacerProperties.allowReschedule"          => "true",
#  "SimAnnealPlacerProperties.allowBreaks"              => "false",
#  "SimAnnealPlacerProperties.scheduleBreakCost"        => "10737418",
#  "SimAnnealPlacerProperties.allowScheduleExtension"   => "false",
#  "SimAnnealPlacerProperties.placerMoveRadius"         => "-1",
#  "SimAnnealPlacerProperties.paddingType"              => "connection",
#  "SimAnnealPlacerProperties.annealerRandomization"    => "uniformDependent",
#  "SimAnnealPlacerProperties.traceCriticalPlacement"   => "false",
#  "SimAnnealPlacerProperties.destinationDistribution"  => "uniform",
#  "RouterProperties.distEstimateExtrapolate"           => "true",
#  "RouterProperties.distEstimateInterpolate"           => "true",
#  "RouterProperties.distEstimateFlushCache"            => "false",
#  "RouterProperties.routerShareFactor"                 => "0.5",
#  "RouterProperties.distanceLatencyFailCostMultiplier" => "15",
);

# This controls which SPR parameters are swept.
our %SPRSweeps = (
# These are examples for sweeping SPR settings
#  "RouterProperties.distanceLatencyFailCostMultiplier" => [ "2", "10", "15" ],
#  "SimAnnealPlacerProperties.movesPerIteration" => [ "10", "20" ]
);

# This controls how the SPR parameters are swept.
our $SPRSweepType = "crossProduct";

##############################################################################
#  Settings for Architecture Generation
##############################################################################

# These settings will be used to generate all architectures
our %archSettings = (
  "archTopo"        => "Grid",
  "archPrefix"      => "Grid",
  "peLibName"       => "Custom",
  "peNameShort"     => "peCG",
  "hasCPG"          => "true",
  "cpgWidth"        => "1",
  "dutUseFullArchName" => "false",
  "genSVG"          => "false",
  "flattenSVG"      => "false",
  "maxII"           => "16",
  # Here are the parameters that really set the size of the architecture
  "numPEs"          => <NUMBER OF CLUSTERS>,
  "staticChannels"  => "0",
  "dynamicChannels" => "16",
  "staticControlChannels"  => "16",
  "dynamicControlChannels" => "0",

  # This cluster has 4 ALUs, 2 LUTs, and 2 cydra registerfile per ALU or LUT
  # It also has 1 memory and 4 streams
  # The !Alpha is a delimited name suffix so the architecture will be
  # differentiated by peCG -> peCGAlpha
  "ArchGenProperties.peClusterDevices"=>"[
    !<CLUSTER NAME>,
    cells:aluR,
    cells:aluR,
    cells:regfile16_r1_w1_cydra_c1,
    cells:regfile16_r1_w1_cydra_c1,
    cells:regfile16_r1_w1_cydra_c1,
    cells:regfile16_r1_w1_cydra_c1,
    cells:aluR,
    cells:aluR,
    cells:regfile16_r1_w1_cydra_c1,
    cells:regfile16_r1_w1_cydra_c1,
    cells:regfile16_r1_w1_cydra_c1,
    cells:regfile16_r1_w1_cydra_c1,
    cells_cpg:lut4R,
    cells_cpg:regfile16_r1_w1_cpg_cydra_c1,
    cells_cpg:regfile16_r1_w1_cpg_cydra_c1,
    cells_cpg:lut4R,
    cells_cpg:regfile16_r1_w1_cpg_cydra_c1,
    cells_cpg:regfile16_r1_w1_cpg_cydra_c1,
    primitives:streamin,
    primitives:streamout,
    primitives:streamin,
    primitives:streamout,
    primitives:streamin,
    primitives:streamout,
    primitives:streamin,
    primitives:streamout,
    cells:liveoutR,
    primitives:kernel_done
  ]",

  # Grid specific properties
  "GridProperties.channelLength"   => "2",
  "GridProperties.ioTopo"   => "Integrated",
  "GridProperties.sbClusterPorts" => "1",
  "GridProperties.auxICTopo"   => "none",
);

# This specifies which settings should be swept when
# generating architectures
our %archSweeps = ( 
# This is an example of how you would sweep through
# a different number of PE's
#"numPEs" => [ "4", "9", "16", "256" ]
);

# This controls how the architecture parameters are swept.
our $archSweepType = "crossProduct";

##############################################################################
#  Settings for doing a binary search on architecture channel width
##############################################################################
# When doing a binary search on channel width, the channels are generated
# based on the existing ratio in %archSettings.  For example, if you had
#our %archSettings = (
#  "staticChannels"  => "7",
#  "dynamicChannels" => "1", ...
# and the current channel width being tried was 24, you would end up
# with 21 static channels and 3 dynamic channels.

# This can be "true" if you want to do the width 
# search, or "false" if you don't
our $doBinaryChannelWidthSearch = "false";

# This specifies the upper limit on channel width to try, inclusive
# If it is set to -1, we will search up, doubling each 
# time until we are successful.
our $widthSearchUpperLimit = 20;

# This specifies the lower limit on channel width to try, inclusive
our $widthSearchLowerLimit = 1;


##############################################################################
#  Settings for Condor submissions
##############################################################################

# Condor submission options
# this specifies who gets email upon job completion(sometimes doesn't work)
# Remember, this is perl so you need that \ in front of an @
#our $notifyUser = `whoami`;
# We should always run nice, unless Scott has given us the "not nice token"
our $niceUser = "true";

# This variable tells the dag manager which stages of the toolflow should
# be run.  Valid options are Macah, FSim, PreSim, ArchGen, SPR, Vsim, and SPRanalyze, SPRplacement.
# They should be a comma separated list.
our $DAGStages = "ArchGen, Macah, FSim, SPR";

